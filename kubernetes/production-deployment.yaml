# kubernetes/production-deployment.yaml
# Production-ready Kubernetes deployment configuration

apiVersion: v1
kind: Namespace
metadata:
  name: tei-nlp-production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: tei-nlp-config
  namespace: tei-nlp-production
data:
  APP_NAME: "TEI NLP Converter"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  HOST: "0.0.0.0"
  PORT: "8080"
  WORKERS: "4"
  MAX_TEXT_LENGTH: "100000"
  RATE_LIMIT_PER_MINUTE: "100"
  CACHE_TTL: "3600"
  ENABLE_METRICS: "true"
  ENABLE_BACKGROUND_TASKS: "true"
  LARGE_TEXT_THRESHOLD: "5000"
  USE_REMOTE_NLP: "true"
  NLP_CIRCUIT_BREAKER_THRESHOLD: "5"
  NLP_CIRCUIT_BREAKER_TIMEOUT: "60"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: tei-nlp-secrets
  namespace: tei-nlp-production
type: Opaque
stringData:
  DATABASE_URL: "postgresql://tei_user:CHANGE_ME@postgres-service:5432/tei_nlp"
  REDIS_URL: "redis://redis-service:6379/0"
  SECRET_KEY: "CHANGE_THIS_TO_RANDOM_SECRET_KEY"
  SESSION_SECRET: "CHANGE_THIS_TO_RANDOM_SESSION_SECRET"
  ENCRYPTION_KEY: "CHANGE_THIS_TO_RANDOM_ENCRYPTION_KEY"
  NLP_SERVER_URL: "http://nlp-service:8081"
  NLP_SERVER_API_KEY: "CHANGE_THIS_IF_USING_AUTH"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: tei-nlp-production
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: tei_nlp
        - name: POSTGRES_USER
          value: tei_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - tei_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - tei_user
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      storageClassName: fast-ssd

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: tei-nlp-production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tei-nlp-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: tei-nlp-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: tei-nlp-production
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tei-nlp-app
  namespace: tei-nlp-production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: tei-nlp-app
  template:
    metadata:
      labels:
        app: tei-nlp-app
        version: v2.1.0
    spec:
      initContainers:
      # Run migrations before starting app
      - name: run-migrations
        image: tei-nlp-converter:v2.1.0
        command: ["alembic", "upgrade", "head"]
        envFrom:
        - configMapRef:
            name: tei-nlp-config
        - secretRef:
            name: tei-nlp-secrets
      containers:
      - name: tei-nlp-app
        image: tei-nlp-converter:v2.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        envFrom:
        - configMapRef:
            name: tei-nlp-config
        - secretRef:
            name: tei-nlp-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: schemas
          mountPath: /app/schemas
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: schemas
        configMap:
          name: tei-schemas
      - name: logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
# NLP Service Deployment (separate microservice)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nlp-service
  namespace: tei-nlp-production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nlp-service
  template:
    metadata:
      labels:
        app: nlp-service
    spec:
      containers:
      - name: nlp-service
        image: nlp-processor:v1.0.0
        ports:
        - containerPort: 8081
        env:
        - name: MODEL_NAME
          value: "en_core_web_sm"
        - name: ENABLE_GPU
          value: "false"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10

---
# NLP Service
apiVersion: v1
kind: Service
metadata:
  name: nlp-service
  namespace: tei-nlp-production
spec:
  selector:
    app: nlp-service
  ports:
  - port: 8081
    targetPort: 8081

---
# Main Application Service
apiVersion: v1
kind: Service
metadata:
  name: tei-nlp-service
  namespace: tei-nlp-production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: tei-nlp-app
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tei-nlp-ingress
  namespace: tei-nlp-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - tei-nlp.yourdomain.com
    secretName: tei-nlp-tls
  rules:
  - host: tei-nlp.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tei-nlp-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for main app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tei-nlp-hpa
  namespace: tei-nlp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tei-nlp-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tei-nlp-network-policy
  namespace: tei-nlp-production
spec:
  podSelector:
    matchLabels:
      app: tei-nlp-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
  - to:
    - podSelector:
        matchLabels:
          app: redis
  - to:
    - podSelector:
        matchLabels:
          app: nlp-service
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: tei-nlp-pdb
  namespace: tei-nlp-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: tei-nlp-app

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: tei-nlp-monitor
  namespace: tei-nlp-production
spec:
  selector:
    matchLabels:
      app: tei-nlp-app
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
